package com.koder.Cyrillitsa.Model;

/**
 * Created by Viktor Galkin/koder/on 01.02.2020
 */

//В Android есть два важных класса: WebViewClient и WebChromeClient, которые взаимодействуют с WebView.

// WebViewClient требуется для того, чтобы контролировать процесс загрузки страницы,
// а WebChromeClient — чтобы взаимодействовать с этой страницей после того, как она успешно загружена.
//
// До завершения загрузки страницы работает WebViewClient, а после — WebChromeClient.
// для того чтобы взаимодействовать с WebView, нам нужно создать собственные инстансы этих классов и передать их в WebView.
// Далее WebView при определенных условиях вызывает разные методы,которые мы переопределили в наших инстансах, и так мы узнаем
// о событиях в системе.

// строки класса   начинаются со слова “import”. Это инструкции, которые дают указания включить другие пакеты в нашем проекте.
// Этот инструмент даёт нам возможность пользоваться тем кодом,который уже за нас написан другими программистами


import android.os.Build;
import android.support.v4.widget.DrawerLayout;
import android.view.View;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.widget.FrameLayout;
import android.widget.ProgressBar;

//открытый класс WebSiteChromeClient(Клиент_Cfqnf_Браузера_Хром) расширяющий класс  WebChromeClient(Веб_Клиент_Браузера_Хром)

//класс  WebChromeClient нужен,чтобы взаимодействовать со страницей после того, как она успешно загружена.

// класс WebChromeClient(Веб_Клиент_Браузера_Хром)— отвечает за все, что связано с UI браузера.
// С его помощью можно управлять историей посещений, создавать новые окна, работать с сообщениями и иконками


//открытый класс WebSiteChromeClient(Клиент_Сайта_Браузера_Хром)

//класс WebSiteChromeClient состоит из:

//1.переменных:


//Заказанный_вьювер

//Индикатор_прогресса , показывающий пользователю,не зависла ли программа

//Веб_вьювер
//Основой всех гибридных приложений является элемент WebView. Данный элемент отображает веб-страницы с помощью WebKit-движка.
//  простой способ создать гибридное приложение для андроид — просто открыть существующий веб-сайт в элементе WebView.
// Нам просто нужно его создать, развернуть на весь экран, и передать ему URL веб-сайта

//Заказанный_Вьювер_Контейнера типа FrameLayout,заполняющийся дочерними элементами View и ViewGroup,
//которые крепятся к левому верхнему углу экрана

//Формат_Рисования DrawerLayout для реализации выдвижного меню NavigationDrawer

//Вьювер_Декорирования

//2.конструктор класса

//3. методов :

// Полноэкранное воспроизведение

//3.1 открытый метод типа void  Показать_Заказанный_Вьювер(вьювер,Вызов_Заказанного_Вьювера )
//если Заказанный_Вьювер существует

//то вызов.Скрытого_заказанного_вьювера()
//и выход из  метода

//загрузка cтранички  веб-сайта для webView

//  простой способ создать гибридное приложение для андроид — просто открыть существующий веб-сайт в элементе WebView.
// Нам просто нужно его создать, развернуть на весь экран, и передать ему URL cтранички  веб-сайта

// загрузка странички веб-сайта  для webView

//Сделать видимым Формат_Рисования DrawerLayout для реализации выдвижного меню NavigationDrawer(Вьювер.ДВИЖЕТСЯ)

//Сделать видимым  Контейнер_Принятого_Вида(customViewContainer)

//Добавить Вид в Контейнер_Принятого_Вида(customViewContainer)

// вьюверу_декорирования.Установить_Видимость_Системы Ui(с флагом_вьювера.

//Проверка:Если версия SDK >= KITKAT
//SDK -набор библиотек разработчика

//то вьюверу_украшения.Установить_Видимость_Системы Ui


//---------------------------------------------

//3.2 открытый метод типа void  Скрыть_Заказанный_Вьювер()

// super.onHideCustomView();

//если Заказанный_Вьювер не существует

//то выход из  проверки

//загрузка странички ресурса "javascript:(function() { window.scrollTo(0, 0); })();" для webView

//загрузка странички "javascript:(function() { document.body.style.overflowX = 'scroll'; })();"для webView

//Сделать видимым drawerLayout


//Сделать видимым Контейнер_заказанного_вьювера(customViewContainer)


//Сделать видимым  Заказанный_вьювер(mCustomView)


//Переместить  Заказанный_вьювер


//обнулить Заказанный_вьювер



// Показать пенель декорирования

//---------------------------
//открытый метод типа void   Изменение_Панели_Индикатора_прогресса(веб_вьювер,процент) , показывающей пользователю,не
// зависла ли программа

//Сделать видимой Панель_Индикатора_прогресса


//установить изменение Панель_Индикатора_прогресса в процентах





//Для предварительно загруженного состояния

//ПроверкаЕсли версия SDK >= KITKAT
//SDK -набор библиотек разработчика


//установить неопределенность Панели_Индикатора_прогресса (при 100 процентах)


//для вьювера.вызывается метод  Оценка_Javascript(), которая будет принимать строку для выполнения и возвращать
// строку с результатом.


//генерируем Значение_Вызова


//открытый метод типа Получить_Значение_Вызова()



//если совпадение_адресов.равно("правда")

//метод equals() класса Object используется для сравнения объектов
//метод equals() сравнивает ссылки на адреса в памяти ,которые хранят переменные и возвращает
//true только в том случае,если адреса совпадают(т.е.переменные ссылаются на один и тот же объект)


//то Сделать (НЕВИДИМОЙ.Во_вьювере) Панель_Индикатора_прогресса

//иначе (если значение.равно("ложь")

// Измененить_Панель_Индикатора_прогресса(Веб_вьювер, до 100 процентов)


//иначе

//если число процентов равно  100

//Сделать видимой  (ЗАПУЩЕННУЮ.во_вьювере) Панель_Индикатора_прогресса




public class WebSiteChromeClient extends WebChromeClient {

    //переменные класса Клиент_Сайта_Браузера_Хром

//Заказанный_вьювер

    View mCustomView;

    //Индикатор_прогресса , показывающий пользователю,не зависла ли программа
    ProgressBar progress;

    //Веб_вьювер
    // Данный элемент отображает веб-страницы с помощью WebKit-движка.
    //  простой способ создать гибридное приложение для андроид — просто открыть существующий веб-сайт в элементе WebView.
// Нам просто нужно его создать, развернуть на весь экран, и передать ему URL веб-сайта
    WebView webView;

    //Заказанный_Вьювер_Контейнера типа FrameLayout,заполняющийся дочерними элементами View и ViewGroup,
    //которые крепятся к левому верхнему углу экрана
    FrameLayout customViewContainer;

    //Формат_Рисования DrawerLayout для реализации выдвижного меню NavigationDrawer
    DrawerLayout drawerLayout;

    //Вьювер_Украшения
    View decorView;

    //------------------------------------------

    //конструктор класса WebSiteChromeClient

    public WebSiteChromeClient(WebView webView, ProgressBar progress, FrameLayout customViewContainer, DrawerLayout drawerLayout, View decorView) {
        this.webView = webView;
        this.progress = progress;
        this.customViewContainer = customViewContainer;
        this.drawerLayout = drawerLayout;
        this.decorView = decorView;
    }

        //открытый метод типа void  Показать_Заказанный_Вьювер(вьювер,Вызов_Заказанного_Вьювера )
        // для полноэкранного воспроизведения
        @Override
        public void onShowCustomView(View view, CustomViewCallback callback)
        {
            //если Заказанный_Вьювер существует
            if (mCustomView != null)
            {
                //то вызов.Скрытого_заказанного_вьювера()
                callback.onCustomViewHidden();

                //выход из  if
                return;
            }
            mCustomView = view;

        //  простой способ создать гибридное приложение для андроид — просто открыть существующий веб-сайт в элементе WebView.
// Нам просто нужно его создать, развернуть на весь экран, и передать ему URL cтранички  веб-сайта

        //загрузка cтранички  веб-сайта для webView


        //IIFE (Immediately Invoked Function Expression) это JavaScript функция, которая выполняется сразу же после того, как она
        //была определена.
        //
        //(function () {
        //    statements
        //})();
        //
        //Это тип выражений, также известный как Self-Executing Anonymous Function, который состоит из двух основных частей.
        //Первая - это сама анонимная функция с лексическим скоупом, заключеннным внутри Оператора группировки ().
        ////  (function () {}) (); .... это регулярное выражение функции.
        //Благодаря этому переменные IIFE замыкаются в его пределах, и глобальная область видимости ими не засоряется.
        //
        //Вторая часть создает мгновенно выполняющееся функциональное выражение  () , благодаря которому JavaScript-движок
        //выполняет функцию напрямую.
        //
        //Функция становится мгновенно выполняющимся функциональным выражением. Переменные внутри функции не могут быть использованы
        // за пределами ее области видимости.
        //
        //
        //Переменная, которой присвоено IIFE, хранит в себе результат выполнения функции, но не саму функцию.

        webView.loadUrl("javascript:(function() { document.body.style.overflowX = 'hidden'; })();");

        // загрузка странички веб-сайта  для webView
        //IIFE (Immediately Invoked Function Expression) это JavaScript функция, которая выполняется сразу же после того, как она
        //была определена.
        //
        //(function () {
        //    statements
        //})();
        //
        //Это тип выражений, также известный как Self-Executing Anonymous Function, который состоит из двух основных частей.
        //Первая - это сама анонимная функция с лексическим скоупом, заключеннным внутри Оператора группировки ().
        ////  (function () {}) (); .... это регулярное выражение функции.
        //Благодаря этому переменные IIFE замыкаются в его пределах, и глобальная область видимости ими не засоряется.
        //
        //Вторая часть создает мгновенно выполняющееся функциональное выражение  () , благодаря которому JavaScript-движок
        //выполняет функцию напрямую.
        //
        //Функция становится мгновенно выполняющимся функциональным выражением. Переменные внутри функции не могут быть использованы
        // за пределами ее области видимости.
        //
        //
        //Переменная, которой присвоено IIFE, хранит в себе результат выполнения функции, но не саму функцию.


        webView.loadUrl("javascript:(function() { window.scrollTo(0, 0); })();");


            //Сделать видимым Формат_Рисования DrawerLayout для реализации выдвижного меню NavigationDrawer(Вьювер.ДВИЖЕТСЯ)
            drawerLayout.setVisibility(View.GONE);

            //Сделать видимым  Контейнер_Принятого_Вида(customViewContainer)
            customViewContainer.setVisibility(View.VISIBLE);

            //Добавить Вид в Контейнер_Принятого_Вида(customViewContainer)
            customViewContainer.addView(view);

            // вьюверу_украшения.Установить_Видимость_Системы Ui(с флагом_вьювера.
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);

            //Если версия SDK >= KITKAT
            //SDK -набор библиотек разработчика
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)
            {
                //вьюверу_украшения.Установить_Видимость_Системы Ui
                decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN);
            }
        }

    //открытый метод типа void  Скрыть_Заказанный_Вьювер()
    @Override
    public void onHideCustomView() {
        super.onHideCustomView();
        if (mCustomView == null)
            return;

        //загрузка странички для webView

        //IIFE (Immediately Invoked Function Expression) это JavaScript функция, которая выполняется сразу же после того, как она
        //была определена.
        //
        //(function () {
        //    statements
        //})();
        //
        //Это тип выражений, также известный как Self-Executing Anonymous Function, который состоит из двух основных частей.
        //Первая - это сама анонимная функция с лексическим скоупом, заключеннным внутри Оператора группировки ().
        ////  (function () {}) (); .... это регулярное выражение функции.
        //Благодаря этому переменные IIFE замыкаются в его пределах, и глобальная область видимости ими не засоряется.
        //
        //Вторая часть создает мгновенно выполняющееся функциональное выражение  () , благодаря которому JavaScript-движок
        //выполняет функцию напрямую.
        //
        //Функция становится мгновенно выполняющимся функциональным выражением. Переменные внутри функции не могут быть использованы
        // за пределами ее области видимости.
        //
        //
        //Переменная, которой присвоено IIFE, хранит в себе результат выполнения функции, но не саму функцию.

        webView.loadUrl("javascript:(function() { window.scrollTo(0, 0); })();");

        //загрузка странички для webView

        webView.loadUrl("javascript:(function() { document.body.style.overflowX = 'scroll'; })();");

        //Сделать видимым drawerLayout
        drawerLayout.setVisibility(View.VISIBLE);

        //Сделать видимым Контейнер_Принятого_Вида(customViewContainer)
        customViewContainer.setVisibility(View.GONE);

        //Сделать видимым  Принятый_Вид(mCustomView)
        mCustomView.setVisibility(View.GONE);

        //Переместить Принятый_Вид в customViewContainer
        customViewContainer.removeView(mCustomView);
        mCustomView = null;

        // Показать пенель состояния
        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
    }

    //открытый метод типа void Изменение_Панели_Индикатора_прогресса(веб_вьювер,процент) , показывающей пользователю,не зависла ли программа
    public void onProgressChanged(WebView view, int percentage)
    {

        //Сделать видимой Панель_Индикатора_прогресса
        progress.setVisibility(View.VISIBLE);

        //установить изменение Панель_Индикатора_прогресса в процентах

        progress.setProgress(percentage);



        //Для предварительно загруженного состояния

        //Если версия SDK >= KITKAT
        //SDK -набор библиотек разработчика

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)
        {
            //установить неопределенность Панели_Индикатора_прогресса (при 100 процентах)
            progress.setIndeterminate(percentage == 100);

            //для вьювера.вызывается метод  Оценка_Javascript(), которая будет принимать строку для выполнения и возвращать
            // строку с результатом.
            view.evaluateJavascript("(function() { return document.readyState == \"complete\"; })();",

                    //генерируем Значение_Вызова
                    new ValueCallback<String>() {

                        //открытый метод типа Получить_Значение_Вызова()


                        @Override
                        public void onReceiveValue(String value) {
                            //если совпадение_адресов.равно("правда")

                            //метод equals() класса Object используется для сравнения объектов
//метод equals() сравнивает ссылки на адреса в памяти ,которые хранят переменные и возвращает
//true только в том случае,если адреса совпадают(т.е.переменные ссылаются на один и тот же объект)

                            if (value.equals("true"))
                            {
                                //то Сделать (НЕВИДИМОЙ.Во_вьювере) Панель_Индикатора_прогресса
                                progress.setVisibility(View.INVISIBLE);
                            }
                            //иначе (если значение.равно("ложь")
                            else
                            {
                                // Измененить_Панель_Индикатора_прогресса(Веб_вьювер, до 100 процентов)
                                onProgressChanged(webView, 100);
                            }
                        }
                    });
        }

        //иначе
        else {

            //если число процентов равно  100
            if (percentage == 100)
            {
                //Сделать видимой  (ЗАПУЩЕННУЮ.во_вьювере) Панель_Индикатора_прогресса
                progress.setVisibility(View.GONE);
            }
        }
    }

}


